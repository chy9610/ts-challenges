// 基础理解：：

// function fn(x) {
//     return x.flip();
// }
// 上述代码中从某种角度来讲，函数并未描述参数类型；但是函数的执行之后，我们才明白必须传入含有 filp函数的对象。
// javascript 提供了动态类型（dynamic typing），简单来说就是通过执行之后才能告诉我们传值是否有问题。

function fn(x: { filp: Function }) {
    return x.filp()
}
// 以上写法规定了参数的类型, 此方式也称为 ”类型注解“
// typescript 提供了动态类型检测（Static type-checking），在参数声明的过程中指定对应类型，运行之前即可抛出错误。

// 注意点：tsc（typescript 编译器）报错之后，编译文件还是发生了更新。
// 故此TypeScript的一大核心观点: 大部分情况下，我们自己要比编译器更了解自己的代码。


// 严格模式（Strictness）
//  typescript 中可以选择性的针对部分代码进行类型检测，而非全部代码。
//  针对项目的迁移来讲我们可以暂时关闭严格模式，以便项目能够更加平稳的过渡完成。
//  如果我们开发一个新项目，则希望能够全程打开严格模式，使用其全面的类型检测和更准确的工具功能。以便我们能够更快的上手typescript写法
//  那么TypeScript中有几个严格模式设置的开关。